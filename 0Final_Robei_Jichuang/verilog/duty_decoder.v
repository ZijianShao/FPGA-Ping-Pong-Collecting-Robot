module duty_decoder(
	state,
	A1duty,
	PWM1H,
	PWM1L,
	A2duty,
	PWM2H,
	PWM2L,
	A3duty,
	PWM3H,
	PWM3L,
	A4duty,
	PWM4H,
	PWM4L,
	A5duty,
	PWM5H,
	PWM5L,
	en,
	key,
	led) ;       //LED输出信号);

	//---Ports declearation: generated by Robei---
	input [1:0] state;
	input [3:0] key;
	output [7:0] A1duty;
	
	output [7:0] A2duty;
	
	output [7:0] A3duty;
	
	output [7:0] A4duty;
	output [7:0] A5duty;
	
	
	
	
	
	output PWM1H;
	output PWM1L;

	output PWM2H;
	output PWM2L;

	output PWM3H;
	output PWM3L;

	output PWM4H;
	output PWM4L;
	
	output PWM5H;
	output PWM5L;
	input en;
	
	output[3:0] led;

	wire [1:0] state;
	wire [3:0] key;	
	reg [7:0] A1duty;
	
	reg [7:0] A2duty;
	
	reg [7:0] A3duty;
	
	reg [7:0] A4duty;
	
	reg [7:0] A5duty;
	
	

	reg PWM1H;
	reg PWM1L;

	reg PWM2H;
	reg PWM2L;

	reg PWM3H;
	reg PWM3L;

	reg PWM4H;
	reg PWM4L;
	
	
	reg PWM5H;
	reg PWM5L;
	
	
	wire en;
	
	
	
	
	reg  [3:0]  led ;          //LED输出信号

	//----Code starts here: integrated by Robei-----
	always@(*)
	begin
	if(en==1)//使能
	begin
	/*
	
	case(key)//按键控制转弯
							  
				4'b1110:begin  //0键前进
							led=4'b1001;
							A1duty=50;A2duty=50;A3duty=50;A4duty=50;
							PWM1H=1'b1;
							PWM1L=1'b0; 
							PWM2H=1'b1;
							PWM2L=1'b0; 
							PWM3H=1'b1;
							PWM3L=1'b0; 
							PWM4H=1'b1;
							PWM4L=1'b0;  end
				4'b0111 :begin//3键右转
						   led=4'b1000;
							A1duty=50;A2duty=50;A3duty=50;A4duty=50;
							PWM1H=1'b0;
							PWM1L=1'b1; 
							PWM2H=1'b0;
							PWM2L=1'b1; 
							PWM3H=1'b1;
							PWM3L=1'b0; 
							PWM4H=1'b1;
							PWM4L=1'b1; 	end
				4'b1011:begin//2键停
						   led=4'b1100;
							A1duty=50;A2duty=50;A3duty=50;A4duty=50;
							PWM1H=1'b1;
							PWM1L=1'b1; 
							PWM2H=1'b1;
							PWM2L=1'b1; 
							PWM3H=1'b1;
							PWM3L=1'b1; 
							PWM4H=1'b1;
							PWM4L=1'b1;    end
				4'b1101 :begin//ֹͣ1键左转
						 led=4'b1110;
							A1duty=50;A2duty=50;A3duty=50;A4duty=50;
							PWM1H=1'b1;
							PWM1L=1'b0; 
							PWM2H=1'b1;
							PWM2L=1'b0; 
							PWM3H=1'b0;
							PWM3L=1'b1; 
							PWM4H=1'b0;
							PWM4L=1'b1;  end
						   
			
				default :begin
					      led=4'b1111 ; 
							A1duty=50;A2duty=50;A3duty=50;A4duty=50;
							PWM1H=1'b1;
							PWM1L=1'b0; 
							PWM2H=1'b1;
							PWM2L=1'b0; 
							PWM3H=1'b1;
							PWM3L=1'b0; 
							PWM4H=1'b1;
							PWM4L=1'b0; end
	endcase
	
	*/
	

	case(state)//state控制
				2'b00 :begin///前进
						   led=4'b0010;
							A1duty=50;A2duty=50;A3duty=50;A4duty=50;A5duty=50;
							PWM5H=1'b1;
							PWM5L=1'b0;
							
							PWM1H=1'b1;
							PWM1L=1'b0; 
							PWM2H=1'b1;
							PWM2L=1'b0; 
							PWM3H=1'b1;
							PWM3L=1'b0; 
							PWM4H=1'b1;
							PWM4L=1'b0; 	end
							2'b01 :begin///停止
						   led=4'b1000;
							A1duty=50;A2duty=50;A3duty=50;A4duty=50;A5duty=50;
							PWM5H=1'b1;
							PWM5L=1'b0;
							
							PWM1H=1'b1;
							PWM1L=1'b1; 
							PWM2H=1'b1;
							PWM2L=1'b1; 
							PWM3H=1'b1;
							PWM3L=1'b1; 
							PWM4H=1'b1;
							PWM4L=1'b1; 	end
							2'b10 :begin//左转
						   led=4'b1100;
							A1duty=50;A2duty=50;A3duty=50;A4duty=50;A5duty=50;
							PWM5H=1'b1;
							PWM5L=1'b0;
							
							PWM1H=1'b1;
							PWM1L=1'b0; 
							PWM2H=1'b1;
							PWM2L=1'b0; 
							PWM3H=1'b0;
							PWM3L=1'b1; 
							PWM4H=1'b0;
							PWM4L=1'b1; 	end
							2'b11 :begin//右转
						   led=4'b1110;
							A1duty=50;A2duty=50;A3duty=50;A4duty=50;A5duty=50;
							PWM5H=1'b1;
							PWM5L=1'b0;
							
							PWM1H=1'b0;
							PWM1L=1'b1; 
							PWM2H=1'b0;
							PWM2L=1'b1; 
							PWM3H=1'b1;
							PWM3L=1'b0; 
							PWM4H=1'b1;
							PWM4L=1'b0; 	end
				
				default :begin
					      led=4'b1111 ; 
							A1duty=50;A2duty=50;A3duty=50;A4duty=50;A5duty=50;
							PWM5H=1'b1;
							PWM5L=1'b0;
							
							PWM1H=1'b1;
							PWM1L=1'b1; 
							PWM2H=1'b1;
							PWM2L=1'b1; 
							PWM3H=1'b1;
							PWM3L=1'b1; 
							PWM4H=1'b1;
							PWM4L=1'b1; end
	endcase
	
	
	
	/*
	case(state)//上古程序
				2'b00 :begin//前进
						   A1duty =35;	   B1duty = 100;  A2duty =35;   B2duty = 100;
						   A3duty =35 ;   B3duty= 100;    A4duty=35;    B4duty = 100;   end
				2'b01 :begin//ֹͣ停止
						 A1duty =0;	   B1duty = 0;  A2duty = 0;   B2duty = 0;
						   A3duty = 0;   B3duty= 0;    A4duty= 0;    B4duty = 0;   end
						   
				2'b10 :begin //左转
						 A1duty =35;	   B1duty = 100;  A2duty = 100;   B2duty = 35;
						   A3duty = 100;   B3duty= 35;    A4duty= 35;    B4duty = 100;   end
						  
				2'b11:begin  //右转
						  A1duty =100;	   B1duty = 35;  A2duty = 35;   B2duty = 100;
						   A3duty =35;   B3duty=100;    A4duty= 100;    B4duty = 35;   end
				default :begin
					      A1duty =A1duty;	   B1duty = B1duty;  A2duty = A2duty;   B2duty = B2duty;
						   A3duty = A3duty;   B3duty= B3duty;    A4duty= A4duty;    B4duty = B4duty;   end
	endcase
	
	*/
	
	
	
	/*
	//源代码灯光调试
	case(0)
				2'b00 :begin//前进
						   led=4'b1000;
							A1duty=30;
							PWM4H=1'b0;
							PWM4L=1'b1;
							end
				2'b01 :begin//ֹͣ停止
						 led=4'b0000;  end
						   
				2'b10 :begin //左转
						 led=4'b1100;   end
						  
				2'b11:begin  //右转
						  led=4'b1110;   end
				default :begin
					      led=4'b1111 ;  end
	endcase
	
	
	
	
	
	
	//源代码
	case(state)
				2'b00 :begin//前进
						   A1duty =0;	   B1duty = 100;  A2duty = 100;   B2duty = 0;
						   A3duty = 100;   B3duty= 0;    A4duty= 0;    B4duty = 100;   end
				2'b01 :begin//ֹͣ停止
						 A1duty =0;	   B1duty = 0;  A2duty = 0;   B2duty = 0;
						   A3duty = 0;   B3duty= 0;    A4duty= 0;    B4duty = 0;   end
						   
				2'b10 :begin //左转
						 A1duty =0;	   B1duty = 100;  A2duty = 0;   B2duty = 100;
						   A3duty = 0;   B3duty= 100;    A4duty= 0;    B4duty = 100;   end
						  
				2'b11:begin  //右转
						  A1duty =100;	   B1duty = 0;  A2duty = 100;   B2duty = 0;
						   A3duty = 100;   B3duty= 0;    A4duty= 100;    B4duty = 0;   end
				default :begin
					      A1duty =A1duty;	   B1duty = B1duty;  A2duty = A2duty;   B2duty = B2duty;
						   A3duty = A3duty;   B3duty= B3duty;    A4duty= A4duty;    B4duty = B4duty;   end
	endcase
	
	
	*/
	
	
	
	end
	else//使能端低电平
	begin
	//A1duty =0;	    A2duty = 0;   A3duty = 0;       A4duty= 0;   
	led=4'b1111;
	end
	end
endmodule    //duty_decoder

