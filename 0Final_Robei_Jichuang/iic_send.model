<!DOCTYPE Robei>
<Module X="0" Class="module" Comment="" Y="0" Parameters="" Include="" File="Current/iic_send.model" Height="600" Parent="0" Name="iic_send" Type="module" Code="parameter   C_DIV_SELECT        =   16'd5000 ; // 分频系数选择&#xa;&#xa;parameter   C_DIV_SELECT0       =   (C_DIV_SELECT >> 2)  -  1           , // 用来产生IIC总线SCL低电平最中间的标志位&#xa;            C_DIV_SELECT1       =   (C_DIV_SELECT >> 1)  -  1           ,&#xa;            C_DIV_SELECT2       =   (C_DIV_SELECT0 + C_DIV_SELECT1) + 1 , // 用来产生IIC总线SCL高电平最中间的标志位&#xa;            C_DIV_SELECT3       =   (C_DIV_SELECT >> 1)  +  1           ; // 用来产生IIC总线SCL下降沿标志位&#xa; &#xa;&#xa;reg     [15:0]   R_scl_cnt       ; // 用来产生IIC总线SCL时钟线的计数器   &#xa;reg             R_scl_en        ; // IIC总线SCL时钟线使能信号&#xa;reg     [3:0]   R_state         ; &#xa;reg             R_sda_mode      ; // 设置SDA模式，1位输出，0为输入&#xa;reg             R_sda_reg       ; // SDA寄存器&#xa;reg     [7:0]   R_load_data     ; // 发送/接收过程中加载的数据，比如设备物理地址，字地址和数据等&#xa;reg     [3:0]   R_bit_cnt       ; // 发送字节状态中bit个数计数&#xa;reg             R_ack_flag      ; // 应答标志&#xa;reg     [3:0]   R_jump_state    ; // 跳转状态，传输一个字节成功并应答以后通过这个变量跳转到导入下一个数据的状态&#xa;&#xa;wire            W_scl_low_mid   ; // SCL的低电平中间标志位&#xa;wire            W_scl_high_mid  ; // SCL的高电平中间标志位&#xa;wire            W_scl_neg        ; // SCL的下降沿标志位&#xa;wire &#x9;&#x9;&#x9;[6:0] I_dev_addr;&#xa;assign I_dev_addr=7'h30;//固定地址&#xa;assign O_sda_mode=R_sda_mode;&#xa;assign IO_sda  =  (R_sda_mode == 1'b1) ? R_sda_reg : 1'bz ;&#xa;&#xa;always @(posedge I_clk or negedge I_rst_n)&#xa;begin&#xa;    if(!I_rst_n)&#xa;        R_scl_cnt   &lt;=  16'd0 ; &#xa;    else if(R_scl_en)   &#xa;        begin&#xa;            if(R_scl_cnt == C_DIV_SELECT - 1'b1)&#xa;                R_scl_cnt &lt;= 16'd0 ;&#xa;            else&#xa;                R_scl_cnt &lt;= R_scl_cnt + 1'b1 ;     &#xa;        end&#xa;    else&#xa;        R_scl_cnt     &lt;= 16'd0 ;&#xa;end&#xa;&#xa;assign O_scl           = (R_scl_cnt &lt;= C_DIV_SELECT1) ? 1'b1 : 1'b0 ; // 产生串行时钟信号O_scl&#xa;assign W_scl_low_mid  = (R_scl_cnt == C_DIV_SELECT2) ? 1'b1 : 1'b0 ; // 产生scl低电平正中间标志位&#xa;assign W_scl_high_mid = (R_scl_cnt == C_DIV_SELECT0) ? 1'b1 : 1'b0 ; // 产生scl高电平正中间标志位&#xa;assign W_scl_neg       = (R_scl_cnt == C_DIV_SELECT3) ? 1'b1 : 1'b0 ; // 产生scl下降沿标志位&#xa;&#xa;always @(posedge I_clk or negedge I_rst_n)&#xa;begin&#xa;    if(!I_rst_n)&#xa;        begin&#xa;            R_state         &lt;=  4'd0 ;&#xa;            R_sda_mode      &lt;=  1'b1 ;&#xa;            R_sda_reg       &lt;=  1'b1 ;&#xa;            R_bit_cnt       &lt;=  4'd0 ;&#xa;            O_done_flag     &lt;=  1'b0 ;&#xa;            R_jump_state    &lt;=  4'd0 ;&#xa;            R_ack_flag        &lt;=    1'b0 ;&#xa;        end&#xa;    else if(I_iic_send_en) // 往IIC设备发送数据&#xa;        begin&#xa;            case(R_state)&#xa;                4'd0   : // 空闲状态设置SCL与SDA均为高&#xa;                    begin&#xa;                        R_sda_mode      &lt;=  1'b1 ; // 设置SDA为输出&#xa;                        R_sda_reg       &lt;=  1'b1 ; // 设置SDA为高电平&#xa;                        R_scl_en        &lt;=  1'b0 ; // 关闭SCL时钟线&#xa;                        R_state         &lt;=  4'd1 ; // 下一个状态是加载设备物理地址状态&#xa;                        R_bit_cnt       &lt;=  4'd0 ; // 发送字节状态中bit个数计数清零&#xa;                        O_done_flag     &lt;=  1'b0 ;&#xa;                        R_jump_state    &lt;=  4'd0 ;&#xa;                    end                               &#xa;                4'd1   :  // 加载IIC设备物理地址              &#xa;                    begin                             &#xa;                        R_load_data     &lt;=  {I_dev_addr, 1'b0}  ;&#xa;                        R_state         &lt;=  4'd4                ;&#xa;                        R_jump_state    &lt;=  4'd3                ;&#xa;                    end                                     &#xa;                4'd2   :;                                    &#xa;                4'd3   :    // 加载要发送的数据                    &#xa;                    begin                                   &#xa;                        R_load_data     &lt;=  I_write_data        ; &#xa;                        R_state         &lt;=  4'd5                ;&#xa;                        R_jump_state    &lt;=  4'd8                ;&#xa;                    end                                                         &#xa;                4'd4   :    // 发送起始信号                   &#xa;                    begin                                   &#xa;                        R_scl_en    &lt;=  1'b1                ; // 打开SCL时钟线&#xa;                        R_sda_mode  &lt;=  1'b1                ; // 设置SDA为输出&#xa;                        if(W_scl_high_mid)                  &#xa;                            begin                           &#xa;                                R_sda_reg   &lt;=  1'b0        ; // 在SCL高电平中间把SDA信号拉低,产生起始信号&#xa;                                R_state     &lt;=  4'd5        ; &#xa;                            end&#xa;                        else&#xa;                            R_state &lt;=  4'd4                ; // 如果SCL高电平中间标志没出现就一直在这个状态等着                          &#xa;                    end&#xa;                4'd5   :    // 发送1个字节，从高位开始发&#xa;                    begin&#xa;                        R_scl_en    &lt;=  1'b1                ; // 打开SCL时钟线&#xa;                        R_sda_mode  &lt;=  1'b1                ; // 设置SDA为输出&#xa;                        if(W_scl_low_mid)&#xa;                            begin&#xa;                                if(R_bit_cnt == 4'd8)&#xa;                                    begin&#xa;                                        R_bit_cnt   &lt;=  4'd0            ;&#xa;                                        R_state     &lt;=  4'd6            ; // 字节发完以后进入应答状态&#xa;                                    end&#xa;                                else&#xa;                                    begin                                 &#xa;                                        R_sda_reg   &lt;=  R_load_data[7-R_bit_cnt] ; // 先发送高位&#xa;                                        R_bit_cnt   &lt;=  R_bit_cnt + 1'b1         ; &#xa;                                    end&#xa;                            end&#xa;                        else&#xa;                            R_state &lt;=  4'd5 ; // 字节没发完时在这个状态一直等待 &#xa;                    end &#xa;                4'd6   :    // 接收应答状态的应答位&#xa;                    begin&#xa;                        R_scl_en    &lt;=  1'b1  ; // 打开SCL时钟线&#xa;                        R_sda_mode  &lt;=  1'b0  ; // 设置SDA为输入&#xa;                        if(W_scl_high_mid)&#xa;                            begin&#xa;                                R_ack_flag  &lt;=  IO_sda  ; &#xa;                                R_state     &lt;=  4'd7    ; &#xa;                            end                            &#xa;                        else&#xa;                            R_state &lt;=  4'd6  ;     &#xa;                    end&#xa;                4'd7  :    // 校验应答位&#xa;                    begin&#xa;                        R_scl_en    &lt;=  1'b1  ; // 打开SCL时钟线                        &#xa;                        if(R_ack_flag == 1'b0)    // 校验通过&#xa;                            begin&#xa;                                if(W_scl_neg == 1'b1) &#xa;                                    begin&#xa;                                        R_state &lt;=  R_jump_state ;&#xa;                                        R_sda_mode  &lt;=  1'b1 ; // 设置SDA的模式为输出&#xa;                                        R_sda_reg   &lt;=  1'b0 ; // 读取完应答信号以后要把SDA信号设置成输出并拉低，因为如果这个状&#xa;                                                               // 态后面是停止状态的话，需要SDA信号的上升沿，所以这里提前拉低它&#xa;                                    end&#xa;                                else&#xa;                                    R_state &lt;= 4'd7    ;&#xa;                            end&#xa;                        else&#xa;                            R_state &lt;=  4'd0 ;      &#xa;                    end&#xa;                4'd8   : // 发送停止信号&#xa;                    begin&#xa;                        R_scl_en    &lt;=  1'b1        ; // 打开SCL时钟线&#xa;                        R_sda_mode  &lt;=  1'b1        ; // 设置SDA为输出&#xa;                        if(W_scl_high_mid)&#xa;                            begin&#xa;                                R_sda_reg   &lt;=  1'b1 ;&#xa;                                R_state     &lt;=  4'd9 ;&#xa;                            end&#xa;                    end&#xa;                4'd9    :   // IIC写操作结束&#xa;                    begin&#xa;                        R_scl_en    &lt;=  1'b0 ; // 关闭SCL时钟线&#xa;                        R_sda_mode  &lt;=  1'b1 ; // 设置SDA为输出&#xa;                        R_sda_reg   &lt;=  1'b1 ; // 拉高SDA保持空闲状态情况&#xa;                        O_done_flag &lt;=  1'b1 ;&#xa;                        R_state     &lt;=  4'd0 ; &#xa;                        R_ack_flag  &lt;=  1'b0 ;&#xa;                    end  &#xa;                default    : R_state     &lt;=  4'd0 ; &#xa;            endcase&#xa;        end &#xa;    else&#xa;        begin&#xa;            R_state         &lt;=  4'd0 ;&#xa;            R_sda_mode      &lt;=  1'b1 ;&#xa;            R_sda_reg       &lt;=  1'b1 ;&#xa;            R_bit_cnt       &lt;=  4'd0 ;&#xa;            O_done_flag     &lt;=  1'b0 ;&#xa;            R_jump_state    &lt;=  4'd0 ;&#xa;            R_ack_flag      &lt;=  1'b0 ;&#xa;        end&#xa;end&#xa;&#xa;&#xa;" Width="900" Color="#d3d3d3">
 <Port X="-0.0222222" Datatype="wire" Datasize="1" Side="left" Y="0.15" Function="" Height="20" Inout="input" Parent="iic_send" Name="I_clk" Width="20" Color="#faebd7"/>
 <Port X="-0.0222222" Datatype="wire" Datasize="1" Side="left" Y="0.316667" Function="" Height="20" Inout="input" Parent="iic_send" Name="I_rst_n" Width="20" Color="#00ffff"/>
 <Port X="-0.0222222" Datatype="wire" Datasize="8" Side="left" Y="0.481667" Function="" Height="20" Inout="input" Parent="iic_send" Name="I_write_data" Width="20" Color="#7fffd4"/>
 <Port X="-0.0222222" Datatype="wire" Datasize="1" Side="left" Y="0.65" Function="" Height="20" Inout="input" Parent="iic_send" Name="I_iic_send_en" Width="20" Color="#f0ffff"/>
 <Port X="0.977778" Datatype="wire" Datasize="1" Side="right" Y="0.15" Function="" Height="20" Inout="output" Parent="iic_send" Name="O_scl" Width="20" Color="#f5f5dc"/>
 <Port X="0.977778" Datatype="reg" Datasize="1" Side="right" Y="0.481667" Function="" Height="20" Inout="output" Parent="iic_send" Name="O_done_flag" Width="20" Color="#ffe4c4"/>
 <Port X="0.977778" Datatype="wire" Datasize="1" Side="right" Y="0.65" Function="" Height="20" Inout="output" Parent="iic_send" Name="O_sda_mode" Width="20" Color="#b8860b"/>
 <Port X="0.977778" Datatype="wire" Datasize="1" Side="right" Y="0.316667" Function="" Height="20" Inout="inout" Parent="iic_send" Name="IO_sda" Width="20" Color="#ffebcd"/>
</Module>
